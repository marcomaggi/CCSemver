\input texinfo.tex
@c %**start of header
@setfilename semver.info
@settitle Libsv
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libsv

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Libsv

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           sv

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Lucas Abel

@c To be used as @value{AUTHOR_URL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_URL                 @email{https://github.com/uael}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2017

@c ------------------------------------------------------------

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@set ORIGIN_URL                 @url{https://github.com/uael/sv/}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C
language library implementing semantic versioning for the C language.

The package is distributed under the terms of the Unlicense, see
@url{http://unlicense.org}.

The latest release, under the @gnu{} Autotools, can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development of the original project takes place at:

@center @value{ORIGIN_URL}

@noindent
development of the @gnu{} Autotools repackaging takes place at:

@center @value{GITHUB_URL}

@noindent
under the @code{autotools.marcomaggi-2017-05-17} branch, and as backup
at:

@center @value{BITBUCKET_URL}
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_URL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* libsv: (libsv).               Libsv, semantic versioning for C.
@end direntry
@end ifinfo

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* semver::                      Semantic versioning.
* identifiers::                 Parsing identifiers.

Appendices

* Package License::             Unlicense.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C
language library implementing semantic versioning for the C language.

@value{PACKAGE} installs the single header file @file{semver.h}.  All
the function names in the @api{} are prefixed with @code{semver_}; all
the constant names are prefixed with @code{SEMVER_}; all the type names
are prefixed with @code{semver_} and suffixed with @code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


@subsubheading Using the @gnu{} Autotools

This package installs a data file for @command{pkg-config}, so when
searching for the installed library with the @gnu{} Autotools, we can
add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([LIBSV],[libsv >= 3.1])
@end example

@noindent
which will set the variables @code{LIBSV_LIBS} and @code{LIBSV_CFLAGS}.

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([libsv],[semver_ctor],,
  [AC_MSG_FAILURE([test for Libsv library failed])])
AC_CHECK_HEADERS([semver.h],,
  [AC_MSG_FAILURE([test for Libsv header failed])])
@end example

@c ------------------------------------------------------------------------

@subsubheading One--shot compilation, Unix command line

For the one--shot compilation of a file named @file{demo.c}, we can do:

@example
gcc -std=c99 -Wall \
   `pkg-config libsv --cflags` \
   `pkg-config libsv --libs` \
   -o demo demo.c
@end example

@c page
@node semver
@chapter Semantic versioning


A @dfn{version} is described by the @samp{v2.0.0} specification found
at:

@center @url{http://semver.org/}

A leading @samp{v} character is stripped off and ignored.

@menu
* semver ranges::               Ranges.
* semver tags::                 Prerelease tags.
* semver advanced::             Advanced range syntax.
@end menu

@c page
@node semver ranges
@section Ranges


A @dfn{version range} is a set of @dfn{comparators} which specify
versions that satisfy the range.  A comparator is composed of an
@dfn{operator} and a @dfn{version}.  The set of primitive operators is:

@table @code
@item <
Less than.

@item <=
Less than or equal to.

@item >
Greater than.

@item >=
Greater than or equal to.

@item =
Equal.  If no operator is specified, then equality is assumed, so this
operator is optional, but MAY be included.
@end table

For example, the comparator @samp{>=1.2.7} would match the versions
@samp{1.2.7}, @samp{1.2.8}, @samp{2.5.3}, and @samp{1.3.9}, but not the
versions @samp{1.2.6} or @samp{1.1.0}.

Comparators can be joined by whitespace to form a @dfn{comparator set},
which is satisfied by the @strong{intersection} of all of the
comparators it includes.

A range is composed of one or more comparator sets, joined by @code{||}.
A version matches a range if and only if every comparator in at least
one of the @code{||}--separated comparator sets is satisfied by the
version.

For example, the range @samp{>=1.2.7 <1.3.0} would match the versions
@samp{1.2.7}, @samp{1.2.8}, and @samp{1.2.99}, but not the versions
@samp{1.2.6}, @samp{1.3.0}, or @samp{1.1.0}.

The range @samp{1.2.7 || >=1.2.9 <2.0.0} would match the versions
@samp{1.2.7}, @samp{1.2.9}, and @samp{1.4.6}, but not the versions
@samp{1.2.8} or @samp{2.0.0}.

@c page
@node semver tags
@section Prerelease tags


If a version has a prerelease tag (for example @samp{1.2.3-alpha.3})
then it will only be allowed to satisfy comparator sets if at least one
comparator with the same @code{(major, minor, patch)} tuple also has a
prerelease tag.

For example, the range @samp{>1.2.3-alpha.3} would be allowed to match
the version @samp{1.2.3-alpha.7}, but it would @strong{not} be satisfied
by @samp{3.4.5-alpha.9}, even though @samp{3.4.5-alpha.9} is technically
``greater than'' @samp{1.2.3-alpha.3} according to the Semantic
Versioning sort rules.  The version range only accepts prerelease tags
on the @samp{1.2.3} version.  The version @samp{3.4.5} @strong{would}
satisfy the range, because it does not have a prerelease tag, and
@samp{3.4.5} is greater than @samp{1.2.3-alpha.7}.

The purpose for this behavior is twofold.

@itemize
@item
Prerelease versions frequently are updated very quickly, and contain
many breaking changes that are (by the author's design) not yet fit for
public consumption.  Therefore, by default, they are excluded from range
matching semantics.

@item
A user who has opted into using a prerelease version has clearly
indicated the intent to use @strong{that specific} set of alpha/beta/rc
versions.  By including a prerelease tag in the range, the user is
indicating that they are aware of the risk.  However, it is still not
appropriate to assume that they have opted into taking a similar risk on
the @strong{next} set of prerelease versions.
@end itemize

@c page
@node semver advanced
@section Advanced range syntax


Advanced range syntax desugars to primitive comparators in deterministic
ways.  Advanced ranges may be combined in the same way as primitive
comparators using white space or @code{||}.

@c ------------------------------------------------------------------------

@subsubheading Hyphen ranges @samp{X.Y.Z - A.B.C}


Specifies an inclusive set.

@table @asis
@item @samp{1.2.3 - 2.3.4} := @samp{>=1.2.3 <=2.3.4}
@end table

If a partial version is provided as the first version in the inclusive
range, then the missing pieces are replaced with zeroes.

@table @asis
@item @samp{1.2 - 2.3.4} := @samp{>=1.2.0 <=2.3.4}
@end table

If a partial version is provided as the second version in the inclusive
range, then all versions that start with the supplied parts of the tuple
are accepted, but nothing that would be greater than the provided tuple
parts.

@table @asis
@item @samp{1.2.3 - 2.3} := @samp{>=1.2.3 <2.4.0}

@item @samp{1.2.3 - 2} := @samp{>=1.2.3 <3.0.0}
@end table

@c ------------------------------------------------------------------------

@subsubheading X-Ranges @samp{1.2.x} @samp{1.X} @samp{1.2.*} @samp{*}


Any of @samp{X}, @samp{x}, or @samp{*} may be used to ``stand in'' for
one of the numeric values in the @code{(major, minor, patch)} tuple.

@table @asis
@item @samp{*} := @samp{>=0.0.0}
Any version satisfies.

@item @samp{1.x} := @samp{>=1.0.0 <2.0.0}
Matching major version.

@item @samp{1.2.x} := @samp{>=1.2.0 <1.3.0}
Matching major and minor versions.
@end table

A partial version range is treated as an X-Range, so the special
character is in fact optional.

@table @asis
@item Empty string := @samp{*} := @samp{>=0.0.0}

@item @samp{1} := @samp{1.x.x} := @samp{>=1.0.0 <2.0.0}

@item @samp{1.2} := @samp{1.2.x} := @samp{>=1.2.0 <1.3.0}
@end table

@c ------------------------------------------------------------------------

@subsubheading Tilde ranges @samp{~1.2.3} @samp{~1.2} @samp{~1}

Allows patch--level changes if a minor version is specified on the
comparator.  Allows minor-level changes if not.

@table @asis
@item @samp{~1.2.3} := @samp{>=1.2.3 <1.(2+1).0} := @samp{>=1.2.3 <1.3.0}

@item @samp{~1.2} := @samp{>=1.2.0 <1.(2+1).0} := @samp{>=1.2.0 <1.3.0}
Same as @samp{1.2.x}.

@item @samp{~1} := @samp{>=1.0.0 <(1+1).0.0} := @samp{>=1.0.0 <2.0.0}
Same as @samp{1.x}.

@item @samp{~0.2.3} := @samp{>=0.2.3 <0.(2+1).0} := @samp{>=0.2.3 <0.3.0}

@item @samp{~0.2} := @samp{>=0.2.0 <0.(2+1).0} := @samp{>=0.2.0 <0.3.0}
Same as @samp{0.2.x}.

@item @samp{~0} := @samp{>=0.0.0 <(0+1).0.0} := @samp{>=0.0.0 <1.0.0}
Same as @samp{0.x}.

@item @samp{~1.2.3-beta.2} := @samp{>=1.2.3-beta.2 <1.3.0}
Note that prereleases in the @samp{1.2.3} version will be allowed, if
they are greater than or equal to @samp{beta.2}.  So,
@samp{1.2.3-beta.4} would be allowed, but @samp{1.2.4-beta.2} would not,
because it is a prerelease of a different @code{(major, minor, patch)}
tuple.
@end table

@c ------------------------------------------------------------------------

@subsubheading Caret ranges @samp{^1.2.3} @samp{^0.2.5} @samp{^0.0.4}


Allow changes that do not modify the left--most non--zero digit in the
@code{(major, minor, patch)} tuple.  In other words, this allows patch
and minor updates for versions @samp{1.0.0} and above, patch updates for
versions @samp{0.X >=0.1.0}, and @strong{no} updates for versions
@samp{0.0.X}.

Many authors treat a @samp{0.x} version as if the @samp{x} were the
major ``breaking change'' indicator.

Caret ranges are ideal when an author may make breaking changes between
@samp{0.2.4} and @samp{0.3.0} releases, which is a common practice.
However, it presumes that there will @strong{not} be breaking changes
between @samp{0.2.4} and @samp{0.2.5}.  It allows for changes that are
presumed to be additive (but non--breaking), according to commonly
observed practices.

@table @asis
@item @samp{^1.2.3} := @samp{>=1.2.3 <2.0.0}

@item @samp{^0.2.3} := @samp{>=0.2.3 <0.3.0}

@item @samp{^0.0.3} := @samp{>=0.0.3 <0.0.4}

@item @samp{^1.2.3-beta.2} := @samp{>=1.2.3-beta.2 <2.0.0}
Note that prereleases in the @samp{1.2.3} version will be allowed, if
they are greater than or equal to @samp{beta.2}.  So,
@samp{1.2.3-beta.4} would be allowed, but @samp{1.2.4-beta.2} would not,
because it is a prerelease of a different @code{(major, minor, patch)}
tuple.

@item @samp{^0.0.3-beta} := @samp{>=0.0.3-beta <0.0.4}
Note that prereleases in the @samp{0.0.3} version @strong{only} will be
allowed, if they are greater than or equal to @samp{beta}.  So,
@samp{0.0.3-pr.2} would be allowed.
@end table

When parsing caret ranges, a missing @code{patch} value desugars to the
number @samp{0}, but will allow flexibility within that value, even if
the major and minor versions are both @samp{0}.

@table @asis
@item @samp{^1.2.x} := @samp{>=1.2.0 <2.0.0}

@item @samp{^0.0.x} := @samp{>=0.0.0 <0.1.0}

@item @samp{^0.0} := @samp{>=0.0.0 <0.1.0}
@end table

A missing @code{minor} and @code{patch} values will desugar to zero, but
also allow flexibility within those values, even if the major version is
zero.

@table @asis
@item @samp{^1.x} := @samp{>=1.0.0 <2.0.0}

@item @samp{^0.x} := @samp{>=0.0.0 <1.0.0}
@end table

@c page
@node identifiers
@chapter Parsing identifiers


In the context of @value{PACKAGE}'s parsing functions, identifiers are
@ascii{} strings holding: alphanumeric characters (according to the
standard function @cfunc{isalnum}); dash characters; dot characters.
Dot characters are interpreted as separators between components.

The identifiers @api{} does @strong{not} duplicate the input strings.

Usually we do @strong{not} need to use the identifiers parser directly.

@menu
* identifiers typedefs::        Type definitions.
* identifiers reading::         Parsing from a string.
* identifiers writing::         Writing to a string.
* identifiers comparing::       Identifiers comparison.
@end menu

@c page
@node identifiers typedefs
@section Type definitions


All the following symbols are defined in the header file
@file{semver.h}.


@deftp {Struct Typedef} semver_id_t
Type of data structures representing a single component in a parsed
identifier; every instance of this structure is a node in a
simply--linked list.  Instances of this structure are initialised with
@cfunc{semver_id_ctor} or @cfunc{semver_id_read}.  Instances of this
structure are finalised with @cfunc{semver_id_dtor}.

The structure has the following public fields:

@table @code
@item bool numeric
A boolean value: @ctrue{} if the this component is numeric; @cfalse{} if
this component is alphabetic.

@item int num
If this component is numeric: this field holds its numeric
representation.  Otherwise this field holds a meaningless value.

@item size_t len
The number of characters in the input string that where parsed to form
this component.

@item const char * raw
Pointer to the character in the input string representing the first
character of this component.  This pointer is valid as long as the input
string handed to @cfunc{semver_id_read} is not mutated.

@item semver_id_t * next
Pointer to the next node in the linked list; @cnull{} if this structure
is the last node.
@end table
@end deftp


@deftypefun void semver_id_ctor (semver_id_t * @var{idp})
Initialise to empty an already allocated data structure representing a
parsed identifier.  Every call to this function must be matched by a
call to @cfunc{semver_id_dtor}:

@example
semver_id_t     id;

semver_id_ctor(&id);
@{
  /* Do something with "id" here. */
@}
semver_id_dtor(&id);
@end example
@end deftypefun


@deftypefun void semver_id_dtor(semver_id_t * @var{idp})
Finalise to empty a data structure representing a parsed identifier;
calls to this function must match a previous call to
@cfunc{semver_id_ctor} or @cfunc{semver_id_read}.

All the resources associated to @var{idp} are released, but the
structure itself.  The following code is correct:

@example
semver_id_t     id;

semver_id_ctor(&id);
@{
  /* Do something with "id" here. */
@}
semver_id_dtor(&id);
@end example

@noindent
the following code is also correct:

@example
semver_id_t *   idp;

idp = malloc(sizeof(semver_id_t));
assert(NULL != idp);
@{
  semver_id_ctor(idp);
  @{
    /* Do something with "idp" here. */
  @}
  semver_id_dtor(idp);
@}
free(idp);
@end example
@end deftypefun

@c page
@node identifiers reading
@section Parsing from a string


All the following symbols are defined in the header file
@file{semver.h}.


@deftypefun char semver_id_read(semver_id_t * @var{idp}, const char * @var{input_buf}, size_t @var{input_len}, size_t * @var{input_offp})
Parse an input string in @ascii{} format which is meant to hold an
identifier.  When successful: the return value is @code{0}.  If an error
occurs: the return value is @code{1}.

The results of parsing are stored in the already allocated structure
referenced by @var{idp}; the structure is first initialised with
@cfunc{semver_id_ctor}.

In both the successful and unsuccessful cases: every call to this
function must be matched by the application of @cfunc{semver_id_dtor} to
@var{idp}.

The input string is referenced by @var{input_buf}; the length of the
input string is @var{input_len} characters.  The argument
@var{input_offp} is both an input and output parameter:

@itemize
@item
Upon entering the function: the offset of the first character to parse
in @var{input_buf} is acquired from the variable referenced by
@var{input_offp}.

@item
When the function returns successfully: the offset of the first
non--parsed character is stored in the variable referenced by
@var{input_offp}; further parsing operations can use such value as
input.

@item
When the function returns unsuccessfully: the value stored in the
variable is invalid.
@end itemize

If the string is empty (@var{input_len} is zero): the function returns
unsuccessfully.

Internally, this function allocates memory with @cfunc{malloc}; if
memory allocation fails: the return value is @code{1}.
@end deftypefun

@c ------------------------------------------------------------------------

@subsubheading Example: parsing a numeric identifier

The following example parses the numeric identifier @samp{123}:

@example
static const char     input_str[] = "123";
semver_id_t   id;
size_t        offset = 0;
char          rv;

rv = semver_id_read(&id, input_str, strlen(input_str), &offset);
if (0 == rv) @{
  printf("numeric?=%d, num=%d, len=%lu, raw=%s, next=%p\n",
         (int)id.numeric, id.num, id.len, id.raw,
         (void *)id.next);
@}
semver_id_dtor(&id);
@end example

@noindent
and it prints:

@example
numeric?=1, num=123, len=3, raw=123, next=(nil)
@end example

@c ------------------------------------------------------------------------

@subsubheading Example: parsing an alphabetic identifier

The following example parses the alphabetic identifier @samp{alpha}:

@example
static const char     input_str[] = "alpha";
semver_id_t   id;
size_t        offset = 0;
char          rv;

rv = semver_id_read(&id, input_str, strlen(input_str), &offset);
if (0 == rv) @{
  printf("numeric?=%d, num=%d, len=%lu, raw=%s, next=%p\n",
         (int)id.numeric, id.num, id.len, id.raw,
         (void *)id.next);
@}
semver_id_dtor(&id);
@end example

@noindent
and it prints:

@example
numeric?=0, num=0, len=5, raw=alpha, next=(nil)
@end example

@c ------------------------------------------------------------------------

@subsubheading Example: parsing a compound identifier

The following example parses the compound identifier @samp{1.2.3-alpha.7}:

@example
static const char     input_str[] = "1.2.3-alpha.7";
semver_id_t   id;
size_t        offset = 0;
char          rv;

rv = semver_id_read(&id, input_str, strlen(input_str), &offset);
if (0 == rv) @{
  for (semver_id_t * iter = &id; iter; iter = iter->next) @{
    printf("numeric?=%d, num=%d, len=%lu, raw=%s\n",
           (int)iter->numeric, iter->num, iter->len, iter->raw);
  @}
@}
semver_id_dtor(&id);
@end example

@noindent
and it prints:

@example
numeric?=1, num=1, len=1, raw=1.2.3-alpha.7
numeric?=1, num=2, len=1, raw=2.3-alpha.7
numeric?=0, num=0, len=7, raw=3-alpha.7
numeric?=1, num=7, len=1, raw=7
@end example

@c ------------------------------------------------------------------------

@subsubheading Example: parsing a compound identifier with build metadata

The following example parses the compound identifier
@samp{1.2.3-alpha.7+x86-64}:

@example
static const char     input_str[] = "1.2.3-alpha.7+x86-64";
semver_id_t   id;
size_t        offset = 0;
char          rv;

rv = semver_id_read(&id, input_str, strlen(input_str), &offset);
if (0 == rv) @{
  for (semver_id_t * iter = &id; iter; iter = iter->next) @{
    printf("numeric?=%d, num=%d, len=%lu, raw=%s\n",
           (int)iter->numeric, iter->num, iter->len, iter->raw);
  @}
@}
semver_id_dtor(&id);
@end example

@noindent
and it prints:

@example
numeric?=1, num=1, len=1, raw=1.2.3-alpha.7+x86-64
numeric?=1, num=2, len=1, raw=2.3-alpha.7+x86-64
numeric?=0, num=0, len=7, raw=3-alpha.7+x86-64
numeric?=1, num=7, len=1, raw=7+x86-64
@end example

@c page
@node identifiers writing
@section Writing to a string


All the following symbols are defined in the header file
@file{semver.h}.


@deftypefun int semver_id_pwrite (const semver_id_t * @var{idp}, char * @var{output_buf}, size_t @var{output_len})
Serialise the identifier @var{idp} as @ascii{} string in the memory
block referenced by @var{output_buf}, which has at least
@var{output_len} characters available.  If the buffer has not enough
room to hold the full identifier serialisation: the string is truncated
to @var{output_len} characters.

Like @cfunc{snprintf}: return the number of characters needed to hold
the full serialisation, excluding the trailing null; if the return value
is greater than or equal to @var{output_len}, the string has been
truncated.
@end deftypefun


@deftypefn {Preprocessor Macro} int semver_id_write (semver_id_t @var{idp}, char * @var{output_buf}, size_t @var{output_len})
Like @cfunc{semver_id_pwrite}, but accepts the identifier structure as
argument, rather than a pointer to it.
@end deftypefn

@c ------------------------------------------------------------------------

@subsubheading Example: serialising an identifier


The following example serialises a compound identifier:

@example
static const char     input_str[] = "1.2.3-alpha.7";
size_t        buffer_len = 32;
char          buffer_ptr[buffer_len];
semver_id_t   id;
size_t        offset = 0;
char          rv;

memset(buffer_ptr, 0, buffer_len);

rv = semver_id_read(&id, input_str, strlen(input_str), &offset);
if (0 == rv) @{
  size_t      needed_count;
  size_t      actual_count;
  needed_count = (size_t)semver_id_write(id, \
      buffer_ptr, buffer_len);
  if (0 < needed_count) @{
    actual_count = (needed_count < buffer_len)? \
       needed_count : buffer_len;
    printf("len=%lu, actual_count=%lu, id=",
      strlen(input_str), actual_count);
    fwrite(buffer_ptr, sizeof(char), actual_count, stdout);
    printf("\n");
  @}
@}
semver_id_dtor(&id);
@end example

@noindent
the code prints:

@example
len=13, actual_count=13, id=1.2.3-alpha.7
@end example

@c page
@node identifiers comparing
@section Identifiers comparison


All the following symbols are defined in the header file
@file{semver.h}.


@deftypefun char semver_id_pcomp (const semver_id_t * @var{A}, const semver_id_t * @var{B})
Compare the numeric components of the given identifiers.  Return
@code{-1} if @var{A} is less than @var{B}; return @code{0} if @var{A} is
equal to @var{B}; return @code{+1} if @var{A} is greater than @var{B}.

An empty identifier is less than any other identifier but the empty one.
@end deftypefun


@deftypefn {Preprocessor Macro} char semver_id_comp (semver_id_t @var{A}, semver_id_t @var{B})
Like @cfunc{semver_id_pcomp}, but accepts the identifier structures as
arguments, rather than pointers to them.
@end deftypefn

@c ------------------------------------------------------------------------

@subsubheading Example: comparing identifiers


The following example compares two identifiers:

@example
static const char     input_str_A[] = "1.2.3";
static const char     input_str_B[] = "1.2.4";
semver_id_t   id_A, id_B;
size_t        offset_A = 0, offset_B = 0;
char          rv;

rv = semver_id_read(&id_A, \
    input_str_A, strlen(input_str_A), &offset_A);
if (0 == rv) @{
  rv = semver_id_read(&id_B, \
      input_str_B, strlen(input_str_B), &offset_B);
  @{
    if (0 == rv) @{
      char    compar = semver_id_comp(id_A, id_B);
      printf("compar=%d\n", (int)compar);
    @}
  @}
  semver_id_dtor(&id_B);
@}
semver_id_dtor(&id_A);
@end example

@c page
@node Package License
@appendix Unlicense


This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non--commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors of
this software dedicate any and all copyright interest in the software to
the public domain. We make this dedication for the benefit of the public
at large and to the detriment of our heirs and successors. We intend
this dedication to be an overt act of relinquishment in perpetuity of
all present and future rights to this software under copyright law.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

For more information, please refer to @url{http://unlicense.org}.

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
The latest release, under the @gnu{} Autotools, can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development of the original projects takes place at:

@center @value{ORIGIN_URL}

@noindent
development of the @gnu{} Autotools repackaging takes place at:

@center @value{GITHUB_URL}

@noindent
under the @code{autotools.marcomaggi-2017-05-17} branch, and as backup
at:

@center @value{BITBUCKET_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
@c Local Variables:
@c fill-column: 72
@c page-delimiter: "^@c page$"
@c End:
