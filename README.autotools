-*- coding: utf-8-unix -*-

				 Libsv
				 =====


Topics
------

  1. Introduction
  2. License
  3. Install
  4. Usage
  A. Credits
  B. Bugs, vulnerabilities and contributions
  C. Resources
  D. Badges and static analysis


1. Introduction
---------------

This  package  installs  a  C  language  library  implementing  semantic
versioning for the C language.

  This README file  describes the building infrastructure  using the GNU
Autotools.


2. License
----------

See the LICENSE file.


3. Install
----------

To install from a proper release tarball, do this:

    $ cd libsv-3.1
    $ mkdir build
    $ cd build
    $ ../configure
    $ make
    $ make check
    $ make install

to inspect the available configuration options:

    $ ../configure --help

  The Makefile is designed to allow parallel builds, so we can do:

   $ make -j4 all && make -j4 check

which,  on  a  4-core  CPU,   should  speed  up  building  and  checking
significantly.

  The  Makefile supports  the  DESTDIR environment  variable to  install
files in a temporary location, example: to see what will happen:

    $ make -n install DESTDIR=/tmp/libsv

to really do it:

    $ make install DESTDIR=/tmp/libsv

  After the installation it is  possible to verify the installed library
against the test suite with:

    $ make installcheck

  From  a repository  checkout or  snapshot  (the ones  from the  Github
site): we  must install the  GNU Autotools (GNU Automake,  GNU Autoconf,
GNU Libtool),  then we must first  run the script "autogen.sh"  from the
top source directory, to generate the needed files:

    $ cd libsv
    $ sh autogen.sh

notice  that  "autogen.sh"  will   run  the  programs  "autoreconf"  and
"libtoolize"; the  latter is  selected through the  environment variable
"LIBTOOLIZE",  whose  value  can  be  customised;  for  example  to  run
"glibtoolize" rather than "libtoolize" we do:

   $ LIBTOOLIZE=glibtoolize sh autogen.sh

  After this the  procedure is the same  as the one for  building from a
proper release tarball, but we have to enable maintainer mode:

    $ ../configure --enable-maintainer-mode [options]
    $ make
    $ make check
    $ make install


4. Usage
--------

Read the documentation.


A. Credits
----------

The stuff was written by Lucas Abel, <https://github.com/uael>.


B. Bugs, vulnerabilities and contributions
------------------------------------------

Bug  and vulnerability  reports are  appreciated, all  the vulnerability
reports  are  public; register  them  using  the  Issue Tracker  at  the
project's Github  site.  For  contributions and  patches please  use the
Pull Requests feature at the project's Github site.

  Reports about the original code must be registered at:

		  <https://github.com/uael/sv/issues>

reports about the GNU Autotools repackaging must be registered at:

	       <https://github.com/marcomaggi/sv/issues>


C. Resources
------------

Development of the original projects takes place at:

		  <https://github.com/uael/sv/>

development of the GNU Autotools repackaging takes place at:

		  <https://github.com/marcomaggi/sv/>

under the "autotools.marcomaggi-2017-05-17" branch, and as backup at:

		 <https://bitbucket.org/marcomaggi/sv/>

the GNU Project software can be found here:

			 <https://www.gnu.org/>


D. Badges and static analysis
-----------------------------

D.1 Travis CI
-------------

Travis CI is  a hosted, distributed continuous  integration service used
to build and test software projects  hosted at GitHub.  We can find this
project's dashboards at:

		    <https://travis-ci.org/uael/sv>
		<https://travis-ci.org/marcomaggi/cre2>

  Usage of this service is configured through the file ".travis.yml" and
the  scripts  for the  GNU  Autotools  builds  are under  the  directory
"meta/travis-ci".

D.3 Clang's Static Analyzer
---------------------------

The Clang Static Analyzer is a source code analysis tool that finds bugs
in C, C++, and Objective-C programs.  It is distributed along with Clang
and we can find it at:

		   <http://clang-analyzer.llvm.org/>

  Usage of this service is implemented with make rules; see the relevant
section in the file "Makefile.am".


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# End:
